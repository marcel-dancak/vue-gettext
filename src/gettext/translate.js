import plurals from './plurals'

const silent = false
const SPACING_RE = /\s{2,}/g

/*
  * Get the translated string from the translation.json file generated by easygettext.
  *
  * @param {Object} translations - The translations dictionary
  * @param {String} language - The language ID (e.g. 'fr_FR' or 'en_US')
  * @param {String} msgid - The translation key
  * @param {Number} n - The number to switch between singular and plural
  * @param {String} context - The translation key context
  * @param {String} defaultPlural - The default plural value (optional)
  *
  * @return {String} The translated string
*/
export default function translate (translations, srcLanguage, language, msgid, n = 1, context = null, defaultPlural = null) {
  if (!msgid) {
    return ''  // Allow empty strings.
  }
  n = Math.abs(n)

  // Default untranslated string, singular or plural.
  const untranslated = defaultPlural && plurals.getTranslationIndex(language, n) > 0 ? defaultPlural : msgid

  // `easygettext`'s `gettext-compile` generates a JSON version of a .po file based on its `Language` field.
  // But in this field, `ll_CC` combinations denoting a languageâ€™s main dialect are abbreviated as `ll`,
  // for example `de` is equivalent to `de_DE` (German as spoken in Germany).
  // See the `Language` section in https://www.gnu.org/software/gettext/manual/html_node/Header-Entry.html
  // So try `ll_CC` first, or the `ll` abbreviation which can be three-letter sometimes:
  // https://www.gnu.org/software/gettext/manual/html_node/Language-Codes.html#Language-Codes
  // let translations = _Vue.$translations[language] || _Vue.$translations[language.split('_')[0]]

  if (!translations) {
    if (!silent && language !== srcLanguage) {
      console.warn(`No translations found for ${language}`)
    }
    return untranslated
  }

  // Currently easygettext trims entries since it needs to output consistent PO translation content
  // even if a web template designer added spaces between lines (which are ignored in HTML or jade,
  // but are significant in text). See #65.
  // Replicate the same behaviour here.
  msgid = msgid.trim()

  let translated = translations[msgid]

  // Sometimes `msgid` may not have the same number of spaces than its translation key.
  // This could happen because we use the private attribute `_renderChildren` to access the raw uninterpolated
  // string to translate in the `created` hook of `component.js`: spaces are not exactly the same between the
  // HTML and the content of `_renderChildren`, e.g. 6 spaces becomes 4 etc. See #15, #38.
  // In such cases, we need to compare the translation keys and `msgid` with the same number of spaces.
  if (!translated && SPACING_RE.test(msgid)) {
    Object.keys(translations).some(key => {
      if (key.replace(SPACING_RE, ' ') === msgid.replace(SPACING_RE, ' ')) {
        translated = translations[key]
        return translated
      }
    })
  }

  if (translated && context) {
    translated = translated[context]
  }

  if (!translated) {
    if (!silent && language !== srcLanguage) {
      let msg = `Untranslated ${language} key found: ${msgid}`
      if (context) {
        msg += ` (with context: ${context})`
      }
      console.warn(msg)
    }
    return untranslated
  }

  // Avoid a crash when a msgid exists with and without a context, see #32.
  if (!(translated instanceof Array) && translated.hasOwnProperty('')) {
    // As things currently stand, the void key means a void context for easygettext.
    translated = translated['']
  }

  if (typeof translated === 'string') {
    translated = [translated]
  }

  let translationIndex = plurals.getTranslationIndex(language, n)

  // Do not assume that the default value of n is 1 for the singular form of all languages.
  // E.g. Arabic, see #69.
  if (translated.length === 1 && n === 1) {
    translationIndex = 0
  }

  return translated[translationIndex]
}
